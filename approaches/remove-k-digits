402. Remove K Digits
https://leetcode.com/problems/remove-k-digits/
Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:
The length of num is less than 10002 and will be â‰¥ k.
The given num does not contain any leading zero.
Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.


'''
1. Observations/constraints

remove n digits to make it smallest

2. List one problem you've done before that is similar to this problem



3. What are 2 approaches that you think might work? Why did you pick these 2?

Brute Force - Trying all combinations
Greedy - Removing all big int

4. Of the 2 approaches before, which one seems most promising? And why? Trade-offs Analysis

Greedy will save computing multiple combinations


5. What are 5 tests cases you would use to verify your solution? Why did you pick these ones?

num = "1432219", k = 3 
num = "1", k = 1
num = "19898981", k = 6
num = "877992119", k = 2
num = "10010099", k = 3
num = "11011", k = 1
num = "111999", k = 2
num = "1111", k = 1

6. After considering the 2 candidate approaches, describe your proposed solution in 3 sentences or less. Please make sure your proposed solution passes the 5 tests cases you listed.

Traverse the input and look for peek i.e. left <= current > right
remove the peak


7. What is the run time of your proposed solution?

O(n) - one pass

8. How much space does your solution use?

O(n) - to maintain stack

9. Please write pseudocode for this solution. Something that you might share with an interviewer before coding.

stack = []
skipped = 0

traverse input string one digit at a time
    if stack is empty 
        if skipped != k and curr > next item
            skip the insert to stack 
            skipped++
        else
            add to stack    
    else
        if skipped != k and curr > last item in stack and next item -> 
            skip the insert to stack 
            skipped++
        else
            add to stack
            
        
while stack lenght > len(input_string) - K
    keep popping from last
    
return str(stack)

10. Run through an example

num = "1432219", k = 3 
stack
[] 1
[1] 4
[1] 3
[1] 2
[1, 2] 2
[1, 2] 1
[1, 2, 1] 9
[1, 2, 1, 9]

num = "111999", k = 2
stack
[] 1
[1] 1
[1, 1] 1
[1, 1, 1] 9
[1, 1, 1, 9] 9
[1, 1, 1, 9, 9] 9
[1, 1, 1, 9, 9, 9]

started popping
[1, 1, 1, 9, 9]
[1, 1, 1, 9]


num = "10010099", k = 2
stack
[] 1
[] 0
[0] 0
[0, 0] 1
[0, 0] 0
[0, 0, 0] 0
[0, 0, 0, 0] 9
[0, 0, 0, 0, 9] 9
[0, 0, 0, 0, 9, 9]

'''
