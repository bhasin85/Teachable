1567. Maximum Length of Subarray With Positive Product
https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product/

Given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.

A subarray of an array is a consecutive sequence of zero or more values taken out of that array.

Return the maximum length of a subarray with positive product.

 

Example 1:

Input: nums = [1,-2,-3,4]
Output: 4
Explanation: The array nums already has a positive product of 24.
Example 2:

Input: nums = [0,1,-2,-3,-4]
Output: 3
Explanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.
Notice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.
Example 3:

Input: nums = [-1,-2,-3,0,1]
Output: 2
Explanation: The longest subarray with positive product is [-1,-2] or [-2,-3].
Example 4:

Input: nums = [-1,2]
Output: 1
Example 5:

Input: nums = [1,2,3,5,-6,4,0,10]
Output: 4



'''
1. Observations/constraints

longest subarray with positive product


2. List one problem you've done before that is similar to this problem

subarray with max sum

3. What are 2 approaches that you think might work? Why did you pick these 2?

Brute Force - All possible subarray and select the one with max positive product
One pass array and find all positive product subarray by just checking the sign

4. Of the 2 approaches before, which one seems most promising? And why? Trade-offs Analysis

Second approach is space and time efficient


5. What are 5 tests cases you would use to verify your solution? Why did you pick these ones?

[1, 2, 0, -1, -2, 0, 3] - Two subarray with same length
[-1, -1, -1, -1, -1] - All negetive
[-1, 0, -1, 0, -1] - No positive subarray
[1, -1, 0, 1, -1, 0] - One digit subarray
[0, 0, 0, 0, 0] - No positive subarray
[1, -1, -1, -1, 1]

6. After considering the 2 candidate approaches, describe your proposed solution in 3 sentences or less. Please make sure your proposed solution passes the 5 tests cases you listed.

Traverse the list with negetive counter and break if find 0 or reach end. 
If negetive counter is even -> update global max

7. What is the run time of your proposed solution?

O(n)

8. How much space does your solution use?

O(1)

9. Please write pseudocode for this solution. Something that you might share with an interviewer before coding.

global_max = 0

int_count, neg_count = 0 
for each integer:
    int_count + 1
    neg_count + 1 -> if integer > 0
    reset int_count and neg_count -> if integer is 0
    if neg_count is even -> global_max = max(global_max, int_count)

return global_max

10. Run through an example


           [1, -1, -1, -1, 1]
global_max  1   1   3   3  3
 int_count  1   2   3   4  4
 neg_count  0   1   2   3  3
 
           [-1, 0, -1, 0, -1]
global_max   0  0   0  0   0
 int_count   1  0   1  0   1
 neg_count   1  0.  1  0   1

'''
